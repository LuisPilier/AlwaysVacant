"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const testing_1 = require("@angular-devkit/schematics/testing");
const test_1 = require("@schematics/angular/utility/test");
const test_utils_1 = require("../test-utils");
describe('Styling Schematic', () => {
    const schematicRunner = new testing_1.SchematicTestRunner('@nativescript/schematics', path.join(__dirname, '../collection.json'));
    const appPath = '';
    const sourceDir = 'app';
    const defaultOptions = {
        appPath,
        sourceDir,
        extension: 'css',
        theme: true,
    };
    let appTree;
    beforeEach(() => {
        appTree = test_utils_1.createEmptyNsOnlyProject(sourceDir);
    });
    describe('when css is used', () => {
        let extension;
        let stylingFile;
        beforeEach(() => {
            extension = 'css';
            stylingFile = `/${appPath}/${sourceDir}/app.css`;
        });
        it('should create app.css file', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, defaultOptions), { extension });
            const tree = yield schematicRunner.runSchematicAsync('styling', options, appTree).toPromise();
            expect(tree.exists(stylingFile));
        }));
        it('should not add scss dependencies to package.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, defaultOptions), { extension });
            const tree = yield schematicRunner.runSchematicAsync('styling', options, appTree).toPromise();
            const content = test_1.getFileContent(tree, `${appPath}/package.json`);
            expect(content).not.toMatch('"node-sass": ');
        }));
        it('should handle the theme flag', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, defaultOptions), { extension, theme: false });
            const tree = yield schematicRunner.runSchematicAsync('styling', options, appTree).toPromise();
            expect(test_1.getFileContent(tree, stylingFile))
                .not
                .toMatch(new RegExp('@import "~@nativescript/theme/css/core.css";'));
        }));
    });
    describe('when scss is used', () => {
        let extension;
        beforeEach(() => {
            extension = 'scss';
        });
        it('should create scss file', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, defaultOptions), { extension });
            const tree = yield schematicRunner.runSchematicAsync('styling', options, appTree).toPromise();
            expect(tree.exists(`${appPath}/${sourceDir}/app.android.scss`));
            expect(tree.exists(`${appPath}/${sourceDir}/app.ios.scss`));
            expect(tree.exists(`${appPath}/${sourceDir}/_app-common.scss`));
            expect(tree.exists(`${appPath}/${sourceDir}/_app-variables.scss`)).toBe(false);
        }));
        it('should add scss dependencies to package.json', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, defaultOptions), { extension });
            const tree = yield schematicRunner.runSchematicAsync('styling', options, appTree).toPromise();
            const content = test_1.getFileContent(tree, `${appPath}/package.json`);
            expect(content).toMatch('"node-sass": ');
        }));
        it('should handle the theme flag', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, defaultOptions), { extension, theme: false });
            const tree = yield schematicRunner.runSchematicAsync('styling', options, appTree).toPromise();
            expect(test_1.getFileContent(tree, `${appPath}/${sourceDir}/app.android.scss`))
                .not
                .toMatch(new RegExp('@import "~@nativescript/theme/css/core.css;'));
            expect(test_1.getFileContent(tree, `${appPath}/${sourceDir}/app.ios.scss`))
                .not
                .toMatch(new RegExp('@import "~@nativescript/theme/css/core.css";'));
        }));
    });
});
//# sourceMappingURL=index_spec.js.map